"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.resolveProviders = exports.Config = void 0;
const axios_1 = __importDefault(require("axios"));
const providers_1 = require("./providers");
const utils_1 = require("./utils");
/**
 * Config object that initializes with configuration data
 * passed in by the user.
 *
 * @export
 * @class Config
 */
class Config {
    /**
     * Creates an instance of Config.
     * @param {(...ProviderReference[] | undefined[] | string[])} config
     * @memberof Config
     */
    constructor(...config) {
        /**
         * Active client.
         */
        this._client = axios_1.default.create();
        /**
         * Client setter.
         * @param client  The client.
         */
        this.setClient = (client) => {
            this._client = client;
        };
        /**
         * Client getter.
         */
        this.getClient = () => {
            return this._client;
        };
        /**
         * Adds a single new, user-defined provider to the list of providers.
         *
         * @param {string} name - the new provider name
         * @param {Provider} provider - the new provider object
         * @param {boolean} [setActive=false] - should the new provider(s) be prioritized
         * @memberof Config
         */
        this.add = (name, provider, setActive = false) => {
            this.addMultiple([{ name, provider }], setActive);
        };
        /**
         * Adds multiple new, user-defined provider to the list of providers.
         *
         * @param {UserDefinedProvider[]} providers - providers to be added
         * @param {boolean} [setActive=false] - should the new provider(s) be prioritized
         * @memberof Config
         */
        this.addMultiple = (newProviders, setActive = false) => {
            // Duplicate check
            newProviders.forEach((p) => {
                if (!(0, utils_1.checkIfUserDefinedProvider)(p)) {
                    throw "Invalid provider format!";
                }
                if (providers_1.providers[p.name]) {
                    throw "A provider by this name is already registered!";
                }
                providers_1.providers[p.name] = p.provider;
            });
            // Adding provider to active providers
            this.addProviders(newProviders.map((p) => p.provider), setActive);
        };
        /**
         * Removes a specific provider
         * @param {Provider} provider - provider to be removed
         * @memberof Config
         */
        this.remove = (provider) => {
            this._active = this._active.filter((p) => p != provider);
        };
        this._active = resolveProviders(...config);
        // adding default fallback
        this.addProviders([providers_1.providers.ExchangeRateAPI], false);
    }
    /**
     * Provider getter.
     *
     * @returns {Provider[]}
     * @memberof Config
     */
    get providers() {
        return this._active;
    }
    /**
     * Provider setter (adder).
     *
     * @param {Provider[]} providers - providers to be added
     * @param {boolean} [setActive=false] - should the new provider(s) be prioritized
     * @returns {void}
     * @memberof Config
     */
    addProviders(providers, setActive) {
        providers = providers.filter((p) => {
            return !this._active.find((a) => a == p);
        });
        if (setActive) {
            this._active.unshift(...providers);
            return;
        }
        this._active.push(...providers);
        return;
    }
    /**
     * Returns the current provider
     *
     * @returns {Provider} - current provider
     * @memberof Config
     */
    activeProvider() {
        return this._active[0];
    }
}
exports.Config = Config;
/**
 * Config resolver that normalizes configuration input into the config interface
 *
 * @export
 * @param {(...ProviderReference[] | undefined[] | string[])} configuration
 * @returns {Provider[]}
 */
function resolveProviders(...configuration) {
    // resolve default if none provided.
    if (typeof configuration === "undefined" || !configuration.length) {
        return [providers_1.providers.ExchangeRateAPI];
    }
    // checking for incorrect config types
    if (typeof configuration[0] !== "object" &&
        typeof configuration[0] !== "undefined" &&
        typeof configuration[0] !== "string") {
        throw "You must either supply nothing or a config object (see the 'config' section to see the different APIs that can be used)";
    }
    // returning single provider
    if (typeof configuration[0] === "string") {
        // constructing in initializationConfig object from string values
        return [(0, providers_1.resolveProvider)({ name: configuration[0], key: configuration[1] })];
    }
    // configuration is an array of providers
    // casting
    const initializationConfig = configuration;
    // resolving all providers
    return initializationConfig.map((provider) => (0, providers_1.resolveProvider)(provider));
}
exports.resolveProviders = resolveProviders;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlnLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3BhcnRzL2NvbmZpZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxrREFBNkM7QUFDN0MsMkNBTXFCO0FBRXJCLG1DQUFxRDtBQVdyRDs7Ozs7O0dBTUc7QUFDSCxNQUFhLE1BQU07SUE2SGpCOzs7O09BSUc7SUFDSCxZQUFZLEdBQUcsTUFBb0Q7UUEvR25FOztXQUVHO1FBQ0ssWUFBTyxHQUFrQixlQUFLLENBQUMsTUFBTSxFQUFFLENBQUM7UUFFaEQ7OztXQUdHO1FBQ0gsY0FBUyxHQUFHLENBQUMsTUFBcUIsRUFBUSxFQUFFO1lBQzFDLElBQUksQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDO1FBQ3hCLENBQUMsQ0FBQztRQUVGOztXQUVHO1FBQ0gsY0FBUyxHQUFHLEdBQUcsRUFBRTtZQUNmLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztRQUN0QixDQUFDLENBQUM7UUF1QkY7Ozs7Ozs7V0FPRztRQUNILFFBQUcsR0FBRyxDQUNKLElBQVksRUFDWixRQUFrQixFQUNsQixZQUFxQixLQUFLLEVBQ3BCLEVBQUU7WUFDUixJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLENBQUMsRUFBRSxTQUFTLENBQUMsQ0FBQztRQUNwRCxDQUFDLENBQUM7UUFFRjs7Ozs7O1dBTUc7UUFDSCxnQkFBVyxHQUFHLENBQ1osWUFBbUMsRUFDbkMsWUFBcUIsS0FBSyxFQUNwQixFQUFFO1lBQ1Isa0JBQWtCO1lBQ2xCLFlBQVksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRTtnQkFDekIsSUFBSSxDQUFDLElBQUEsa0NBQTBCLEVBQUMsQ0FBQyxDQUFDLEVBQUU7b0JBQ2xDLE1BQU0sMEJBQTBCLENBQUM7aUJBQ2xDO2dCQUVELElBQUkscUJBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUU7b0JBQ3JCLE1B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